const Classes={Bowmaster:"archer",Marksman:"archer",Shadower:"thief",Buccaneer:"bucc",Corsair:"corsair","Dark Knight":"warrior",Hero:"hero",Paladin:"warrior",Magician:"magician",Beginner:"beginner","Night Lord":"thief"},HealthPointGainMinimumResetAP={archer:16,thief:16,corsair:20,bucc:40,warrior:50,hero:50,magician:10,beginner:8},HealthPointGainAverageResetAP={archer:18,thief:18,corsair:20,bucc:40,warrior:52.5,hero:52.5,magician:15,beginner:10},HealthPointGainMinimumFreshAP={archer:16,thief:20,corsair:16,bucc:36,warrior:50,hero:50,magician:6,beginner:8},HealthPointGainAverageFreshAP={archer:18,thief:22,corsair:18,bucc:38,warrior:52,hero:52,magician:8,beginner:10},ManaPointLoss={archer:12,thief:12,corsair:16,bucc:16,warrior:4,hero:4,magician:30,beginner:8},MinimumManaPointFunctions={archer:level=>14*level+148,thief:level=>14*level+148,corsair:level=>18*level+111,bucc:level=>18*level+111,warrior:level=>4*level+156,hero:level=>4*level+56,magician:level=>22*level+488,beginner:level=>10*level+2},OptimalWashingStrategy={archer:"either",thief:"fresh",bucc:"reset",corsair:"reset",warrior:"reset",hero:"reset",magician:"reset",beginner:"either"};function GetOptimalWashingStrategy(internalClassName){if(!Classes.hasOwnProperty(internalClassName))throw new Exception("unrecognized class name "+internalClassName);internalClassName=Classes[internalClassName];return OptimalWashingStrategy[internalClassName]}function GetWashableManaPoints(internalClassName,minimumMana,currentMana){if(!Classes.hasOwnProperty(internalClassName))throw new Exception("unrecognized class name "+internalClassName);internalClassName=Classes[internalClassName],minimumMana=MinimumManaPointFunctions[internalClassName](minimumMana);return Math.max(currentMana-minimumMana,0)}function GetWashedManaPoints(internalClassName,numberOfWashes){if(!Classes.hasOwnProperty(internalClassName))throw new Exception("unrecognized class name "+internalClassName);internalClassName=Classes[internalClassName];return ManaPointLoss[internalClassName]*numberOfWashes}function GetWashes(mpLossPerWash,washableMana){if(!Classes.hasOwnProperty(mpLossPerWash))throw new Exception("unrecognized class name "+mpLossPerWash);mpLossPerWash=Classes[mpLossPerWash],mpLossPerWash=ManaPointLoss[mpLossPerWash];return Math.floor(washableMana/mpLossPerWash)}function GetMinimalHealthPointGainOptimal(internalClassName,numFreshAPs,numWashedAPs){if(!Classes.hasOwnProperty(internalClassName))throw new Exception("unrecognized class name "+internalClassName);internalClassName=Classes[internalClassName];return numFreshAPs*HealthPointGainMinimumFreshAP[internalClassName]+numWashedAPs*HealthPointGainMinimumResetAP[internalClassName]}function GetAverageHealthPointGainOptimal(internalClassName,numFreshAPs,numWashedAPs){if(!Classes.hasOwnProperty(internalClassName))throw new Exception("unrecognized class name "+internalClassName);internalClassName=Classes[internalClassName];return numFreshAPs*HealthPointGainAverageFreshAP[internalClassName]+numWashedAPs*HealthPointGainAverageResetAP[internalClassName]}function GetMinimalHealthPointGainWashNow(internalClassName,numWashedAPs){if(!Classes.hasOwnProperty(internalClassName))throw new Exception("unrecognized class name "+internalClassName);internalClassName=Classes[internalClassName];return numWashedAPs*HealthPointGainMinimumResetAP[internalClassName]}function GetAverageHealthPointGainWashNow(internalClassName,numWashedAPs){if(!Classes.hasOwnProperty(internalClassName))throw new Exception("unrecognized class name "+internalClassName);internalClassName=Classes[internalClassName];return numWashedAPs*HealthPointGainAverageResetAP[internalClassName]}function GetFreshAPsLeft(level){return 5*(200-level)}
